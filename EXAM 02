PUTNBR
easy - anything under 9 use write(1, &"0123456789"[i % 10], 1)
anything over 9 needs to be putnbr(i / 10)
harder - look for 

STR CMP
if s1 == s2
continue, else
use return unsigned char - unsigned char

STR DUP
same as copy STRCPY but with malloc
find length

STR CAP
keep all the spaces
if its the first char or prev was a space/tab then UPP
if not the first or space/tab and is UPP then make LOW
otherwise write


LASTWORD
go to the end of string and work backwards
go back all spaces and then all continue going back until next space
start loop from there and write until space


CAMEL TO SNAKE
search for UPP letters
write '_' 
write LC letters

SNAKE TO CAMEL
loop through until '_'
move to next char and make UPP
otherwise just print

EPUR and EXPAND
use a flag to know when there are spaces
when spaces have passed check flag to see if space needs to be written

ALPHA MIRROR
for UPP use (A - s1[i]) + Z

ROT
keep it simple, make a specific rule for Z, z.
rest just + 1.

HIDENP
check both strings for '\0'
if s1 = s2 move on in s1, otherwise move on in s2
if s1 reaches '\0' it means all letters werew found write 1, else 0

INTER
remember if(checkdbls(s1, s1[i], index)) == 1
in checkdbls use (i < index) if s1 = c, return 0, else 1

UNION
join both strings s1, s2 into s1, then do checkdbls

flood fill / split

STRREV
only allowed to use the same string, use a temp char c
while (end > start)

REV_WSTR
use i find length of whole string and set end point
in the loop while i is not 0 
 from now always set end based on i is 0 or in spaces
 set start of word when not a space
loop start to end and print
if i is not -1 then print space

RSTR_CAP
print all spaces, if i+1 is a space or '\0', UPP current s1[i]
otherwise check if any letters are UPP And make them LOW

FT ATOI BASE
same as ATOI but have to calc accroding to the base and HEX
check each char in string and convert. If 0-9 same but make int usingn  c - 0
a -f and A - F, then c - 'A' + 10 give correct letter.

FT ITOA
convert int to string.
need unsigend int variable for neg numnbers
need to count how many digits, if there is a minus add one place first,
use divide by 10 to count digits. 
Malloc with number of digits then 
if the int is negative add '-' to the start of string and make int positive and cont.
add numbers to string backwards by MOD by 10 then divide by 10

POWER OF 2
divide n by 2 until n%2 is not 0 - should be 1 to return 1

LCM
use fizzbuzz method, don't forget if one input is 0 return 0

PGCD
Use simple atoi to get ints
use the smallest and find out the mod == 0 see if the same mod work with other number

