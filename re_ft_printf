// here is ft_printf and gnl - Copy and paste to VSCODE to make it easier to read.
// printf you only need 'd' 's' 'x'
// TIP: just ft_putchar doesn't need : int count = 0; and return(count);
#include <stdarg.h>
#include <unistd.h>

int ft_putchar(char c)
{
    return (write(1, &c, 1));
}

int ft_putstr(char *str)
{
    int i = 0;
    int count = 0;

    if (!str)
    {
        write(1, "(null)", 6); //important for the exam
        return (6);
    }
    while (str[i] != '\0')
    {
        count += ft_putchar(str[i]);
        i++;
    }
    return (count);
}

int ft_putnbr(unsigned int nb, unsigned int base)
{
    char *base_set = "0123456789abcdef";
    int count = 0;

    if (nb >= base) // I forgot = which messed me up for the first test in the exam
        count += ft_putnbr(nb / base, base);
    count += ft_putchar(base_set[nb%base]);
    return (count);
}

int ft_printd(int nb)
{
    int count = 0;

    if (nb < 0)
    {
        count += ft_putchar('-');
        if (nb == -2147483648) //important for the exam
            return (count += ft_putstr("2147483648"));
        nb = -nb;
    }
    count += ft_putnbr((unsigned int)nb, 10);
    return (count);
}

int ft_printf(const char *format, ...)
{
    int i = 0;
    int count = 0;
    va_list args;

    if (format == NULL)
        return (0);
    va_start(args, format);
    while (format[i] != '\0')
    {
        if (format[i] == '%')
        {
            if (format[i+1] == 's')
                count += ft_putstr(va_arg(args, char *));
            else if (format[i+1] == 'd')
                count += ft_printd(va_arg(args, int));
            else if (format[i+1] == 'x')
                count += ft_putnbr(va_arg(args, unsigned int), 16);
            i++;
        }
        else
            count += ft_putchar(format[i]);
        i++;
    }
    return (count);
}


//----------------------
// MAIN - just for testing compare with printf
//----------------------
#include <stdio.h>
int main(void)
{
	int c1 = 0, c2 = 0;
	char *f = NULL;

	c1 = ft_printf("%s, %s, %d, %x\n", "Hello", f, -123, 48879);
	c2 = printf("%s, %s, %d, %x\n", "Hello", f, -123, 48879);

	printf("c1: %d, c2: %d\n", c1, c2);
	// c1 and c2 should give the same result
	// now test numbers just for exam but usually fail with printf
	//INT_MIN (can use man limits.h to find this number + 1)
	// and positive 10 digit number
	ft_printf("%d\n %d\n", -2147483648,, 1092456874);
	return (0);
}

//-------------------
// GNL
//--------------------
#include <stdlib.h>
#include <unistd.h>

#ifndef BUFFER_SIZE
# define BUFFER_SIZE 42
#endif

static char	*ft_strjoin(char *s1, char *s2, int s2_len)
{
	int		i = 0, j = 0;
	char	*res;

	while (s1 && s1[i])
		i++;
	res = malloc(i + s2_len + 1);
	if (!res)
		return (NULL);
	i = 0;
	while (s1 && s1[i])
	{
		res[i] = s1[i];
		i++;
	}
	while (j < s2_len)
		res[i++] = s2[j++];
	res[i] = '\0';
	free(s1);
	return (res);
}

char	*get_next_line(int fd)
{
	static char	buffer[BUFFER_SIZE];
	char		*line = NULL;
	ssize_t		n;
	int			i = 0;

	if (fd < 0 || BUFFER_SIZE <= 0)
		return (NULL);
	while (1)
	{
		n = read(fd, &buffer[i], 1);
		if (n <= 0)
			break;
		if (buffer[i] == '\n')
		{
			line = ft_strjoin(line, buffer, i + 1);
			return (line);
		}
		i++;
		if (i >= BUFFER_SIZE)
		{
			line = ft_strjoin(line, buffer, i);
			i = 0;
		}
	}
	if (line || i)
		return (ft_strjoin(line, buffer, i));
	free(line);
	return (NULL);
}

