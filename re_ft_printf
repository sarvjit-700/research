#include <unistd.h>
#include <stdlib.h>
#include <stdarg.h>

int	ft_putchar(char c)
{
	return (write(1, &c, 1));
}

int	ft_putstr(char *str)
{
	int		i = 0;

	if (str == NULL)
		str = "(null)";
	while (str[i])
	{
		ft_putchar(str[i]);
		i++;
	}
	return (i);
}

int	ft_putnbr(unsigned int nb, int base)
{
	int		i = nb % base;
	char	*base_set = "0123456789abcdef";
	int		count = 0;

	if (nb / base > 0)
		count += ft_putnbr(nb / base, base);
	count += ft_putchar(base_set[i]);
	return (count);
}

int	print_d(int nb)
{
	int		count = 0;

	if (nb < 0)
	{
		count += ft_putchar('-');
		if (nb == -2147483648)
		{
			count += ft_putstr("2147483648");
			return (count);
		}
		nb = -nb;
	}
	count += ft_putnbr((unsigned int)nb, 10);
	return (count);
}

int	ft_printf(char *str, ...)
{
	va_list		ap;
	int			count = 0;
	int			i = 0;

	va_start(ap, str);
	if (str == NULL)
		return (0);
	while (str[i])
	{
		if (str[i] == '%')
		{
			if (str[i + 1] == 'd')
				count += print_d(va_arg(ap, int));
			else if (str[i + 1] == 'x')
				count += ft_putnbr(va_arg(ap, unsigned int), 16);
			else if (str[i + 1] == 's')
				count += ft_putstr(va_arg(ap, char *));
			i++;
		}
		else
			count += ft_putchar(str[i]);
		i++;
	}
	va_end(ap);
	return (count);
}


----------------------
MAIN
----------------------
#include <stdio.h>
int main(void)
{
	ft_printf("Char: %c\n", 'A');
	ft_printf("String: %s\n", "Hello");
	ft_printf("Int: %d %i\n", -123, 456);
	ft_printf("Unsigned: %u\n", 3000000000u);
	ft_printf("Hex (lower): %x\n", 48879);
	ft_printf("Hex (upper): %X\n", 48879);
	ft_printf("Pointer: %p\n", (void *)0x12345678);
	return (0);
}

-------------------
GNL
--------------------
#include <stdlib.h>
#include <unistd.h>

#ifndef BUFFER_SIZE
# define BUFFER_SIZE 42
#endif

static char	*ft_strjoin(char *s1, char *s2, int s2_len)
{
	int		i = 0, j = 0;
	char	*res;

	while (s1 && s1[i])
		i++;
	res = malloc(i + s2_len + 1);
	if (!res)
		return (NULL);
	i = 0;
	while (s1 && s1[i])
	{
		res[i] = s1[i];
		i++;
	}
	while (j < s2_len)
		res[i++] = s2[j++];
	res[i] = '\0';
	free(s1);
	return (res);
}

char	*get_next_line(int fd)
{
	static char	buffer[BUFFER_SIZE];
	char		*line = NULL;
	ssize_t		n;
	int			i = 0;

	if (fd < 0 || BUFFER_SIZE <= 0)
		return (NULL);
	while (1)
	{
		n = read(fd, &buffer[i], 1);
		if (n <= 0)
			break;
		if (buffer[i] == '\n')
		{
			line = ft_strjoin(line, buffer, i + 1);
			return (line);
		}
		i++;
		if (i >= BUFFER_SIZE)
		{
			line = ft_strjoin(line, buffer, i);
			i = 0;
		}
	}
	if (line || i)
		return (ft_strjoin(line, buffer, i));
	free(line);
	return (NULL);
}

