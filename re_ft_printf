#include <unistd.h>
#include <stdarg.h>
#include <stdlib.h>
#include <stdint.h>

int	ft_putchar(char c)
{
	return (write(1, &c, 1));
}

int	ft_putstr(char *s)
{
	int	len = 0;

	if (!s)
		return (write(1, "(null)", 6));
	while (*s)
		len += write(1, s++, 1);
	return (len);
}

int	ft_putnbr(int n)
{
	char	buffer[12];
	int		i = 11;
	long	nb = n;
	int		len = 0;

	if (nb == 0)
		return (write(1, "0", 1));
	if (nb < 0)
	{
		len += write(1, "-", 1);
		nb = -nb;
	}
	buffer[i--] = '\0';
	while (nb > 0)
	{
		buffer[i--] = (nb % 10) + '0';
		nb /= 10;
	}
	return (len + write(1, &buffer[i + 1], 11 - i - 1));
}

int	ft_putunbr(unsigned int n)
{
	char	buffer[11];
	int		i = 10;

	if (n == 0)
		return (write(1, "0", 1));
	buffer[i--] = '\0';
	while (n > 0)
	{
		buffer[i--] = (n % 10) + '0';
		n /= 10;
	}
	return (write(1, &buffer[i + 1], 10 - i - 1));
}

int	ft_puthex(unsigned long n, int uppercase)
{
	char	*base = uppercase ? "0123456789ABCDEF" : "0123456789abcdef";
	char	buffer[17];
	int		i = 16;
	int		len;

	if (n == 0)
		return (write(1, "0", 1));
	buffer[i--] = '\0';
	while (n > 0)
	{
		buffer[i--] = base[n % 16];
		n /= 16;
	}
	len = write(1, &buffer[i + 1], 16 - i - 1);
	return (len);
}

int	ft_putptr(void *ptr)
{
	int	len = 0;

	if (!ptr)
		return (write(1, "(nil)", 5));
	len += write(1, "0x", 2);
	len += ft_puthex((uintptr_t)ptr, 0);
	return (len);
}

int	handle_format(char spec, va_list args)
{
	if (spec == 'c')
		return (ft_putchar(va_arg(args, int)));
	else if (spec == 's')
		return (ft_putstr(va_arg(args, char *)));
	else if (spec == 'd' || spec == 'i')
		return (ft_putnbr(va_arg(args, int)));
	else if (spec == 'u')
		return (ft_putunbr(va_arg(args, unsigned int)));
	else if (spec == 'x')
		return (ft_puthex(va_arg(args, unsigned int), 0));
	else if (spec == 'X')
		return (ft_puthex(va_arg(args, unsigned int), 1));
	else if (spec == 'p')
		return (ft_putptr(va_arg(args, void *)));
	else
		return (ft_putchar(spec));
}

int	ft_printf(const char *format, ...)
{
	va_list	args;
	int		i = 0, total = 0;

	va_start(args, format);
	while (format[i])
	{
		if (format[i] == '%' && format[i + 1])
			total += handle_format(format[++i], args);
		else
			total += write(1, &format[i], 1);
		i++;
	}
	va_end(args);
	return (total);
}


----------------------
MAIN
----------------------
#include <stdio.h>
int main(void)
{
	ft_printf("Char: %c\n", 'A');
	ft_printf("String: %s\n", "Hello");
	ft_printf("Int: %d %i\n", -123, 456);
	ft_printf("Unsigned: %u\n", 3000000000u);
	ft_printf("Hex (lower): %x\n", 48879);
	ft_printf("Hex (upper): %X\n", 48879);
	ft_printf("Pointer: %p\n", (void *)0x12345678);
	return (0);
}
